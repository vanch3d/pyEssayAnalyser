openapi: 3.0.1
info:
  title: Swagger pyEssayAnalyser v3
  description: |
    A Swagger/OAS (v3) description of the Essay Analyser API.
    ----

    The Essay Analyser (pyEA) was developped as part of the SafeSEA project (Open University, Oxford University) which aimed at supporting students in writing essays, using automatic summarisation techniques to promote reflection.

    The approach to producing essay summaries uses two simple extractive summarisation techniques: key phrase extraction and key sentence extraction.

    Key phrases words and short phrases that are the most suggestive of the content of a discourse. Similarly, key sentences are the sentences that are most suggestive of a text's content.

    The pyEA API provides a simple access to the analyser and key words/sentences extraction.

    For more information:
    - [About the project](http://nvl.calques3d.org/projects/safesea)
    - [pyEA on GitHub](https://github.com/vanch3d/pyEssayAnalyser)

    Copyright (c) 2013-2018 Debora Georgia Field <deboraf7 [at] aol.com>

    Copyright (c) 2013-2018 Nicolas Van Labeke <nicolas.github [at] calques3d.org>

  contact:
    name: vanch3d
    url: 'https://github.com/vanch3d'
  license:
    name: MIT
    url: 'https://github.com/vanch3d/pyEssayAnalyser/blob/master/LICENSE'
  version: 3.3.0
servers:
  - url: 'http://localhost:5000/api'
    description: pyEAv3 DEV server
  - url: 'http://vanch3d.pythonanywhere.com/api'
    description: pyEAv3 PRODUCTION server
paths:
  /analyse:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - Extractive Summarisation
      summary: Submit a text for analysis
      description: |
        The main access point to the analyser.
        Receive a text for analysis and return a complete data package representing the summmary of the text:
        - list of key words
        - list of key sentences
        - identification of text structure (headings, title, introduction, ...)

        The operation accepts 4 types of input:
        - plain text (line breaks to indicate paragraphs)
        - Markdown (double line breaks to indicate paragraphs)
        - json (sentences as string items, grouped in array for paragraphs, grouped in array for the whole text)
        - HTML form, with the main field 'text' containing plain text

        Note that the analysis is time-consuming and can take up to 20-30 seconds for a 4000-words essay.

      operationId: essay_post_analysis
      requestBody:
        description: the text to be analysed
        required: true
        content:
          application/json:
            schema:
              type: array
              description: paragraph
              items:
                type: array
                items:
                  description: sentence
                  type: string
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Essay'
          text/plain:
            schema:
              type: string
          text/markdown:
            schema:
              type: string
      responses:
        '200':
          description: |
            text analysed; return a data package representing the extractive summarisation of the text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Summary'
        '404':
          description: |
            to do
        '500':
          description: |
            to do
components:
  securitySchemes:
    ApiKeyAuth:               # arbitrary name for the security scheme
      type: apiKey
      in: header              # can be "header", "query" or "cookie"
      name: PYEA-API-KEY      # name of the header, query parameter or cookie
  schemas:
    Essay:
      required:
        - text
      properties:
        text:
          type: string
    NGrams:
      description: a n-gram
      properties:
        count:
          type: integer
        lemma:
          type: array
          items:
            type: string
        source:
          type: array
          items:
            type: string
        score:
          type: array
          items:
            type: string
        dispersion:
          type: array
          items:
            type: integer
        trend:
          type: array
          items:
            type: integer
    Sentence:
      description: An object representing a summarised sentence of the text
      properties:
        id:
          type: integer
        lemma:
          type: array
          items:
            type: string
        rank:
          description: the 'keyness' ranking of the sentence in the text
          type: integer
        tag:
          type: string
          enum:
            - "#+s:i#"
            - "#dummy#"
        text:
          type: string
    Summary:
      properties:
        data:
          type: object
          properties:
            ngrams:
              type: object
              properties:
                keywords:
                  type: array
                  items:
                    $ref: '#/components/schemas/NGrams'
                bigrams:
                  type: array
                  items:
                    $ref: '#/components/schemas/NGrams'
                trigrams:
                  type: array
                  items:
                    $ref: '#/components/schemas/NGrams'
                quadgrams:
                  type: array
                  items:
                    $ref: '#/components/schemas/NGrams'
            parasenttok:
              description: |
                the text restructured as an array of paragraphs,
                each of them an array of sentences,
                each of them summarising the original sentence in the text
              type: array
              items:
                description: a paragraph, as an array of sentence
                type: array
                items:
                  $ref: '#/components/schemas/Sentence'
        metadata:
          type: object
          properties:
            version:
              type: string
            se_stats:
              type: object
  parameters: {}
tags:
  - name: Extractive Summarisation
    description: All routes to the analyser and summariser itself